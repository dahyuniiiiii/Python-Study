# 객체지향 사용안하면
# h = 10
# v = 20
# def area(h, v): #area함수가 처리할 데이터를 괄호안에 넣음
#     return h * v
# a = area(h, v)
# print(a)

# 객체지향 사용시
class Rectangle(object):  # 'Rectangle' 클래스를 정의
    def __init__(self, h, v):  # 객체 생성시 초기화, h와 v를 받아 인스턴스 변수로 저장
        self.h = h  # 인스턴스 변수 self.h에 h 값을 저장
        self.v = v  # 인스턴스 변수 self.v에 v 값을 저장

    def area(self):  # 넓이를 계산하는 메서드 정의
        return self.h * self.v  # 인스턴스 변수 h와 v를 곱해 반환

# Rectangle 클래스의 인스턴스를 생성하고, r이라는 변수에 저장
r = Rectangle(10, 20)
#호출시 init메서드 실행 후 self.h, self.v에 10과 20저장 
a = r.area()
#호출시 self.h*self.v가 계산됨
print(a)

#객체지향 장점
# 재사용성: 객체지향 방식은 코드 재사용에 뛰어납니다. 동일한 구조의 직사각형이 여러 개 필요할 때, 매번 코드를 새로 작성할 필요 없이 Rectangle 클래스를 인스턴스화해 사용할 수 있습니다.

# 유지보수 용이: 클래스는 관련 기능과 데이터를 한곳에 묶어두기 때문에, 수정이 필요할 때 특정 클래스만 수정하면 됩니다. 코드 구조가 명확해지고, 유지보수가 쉬워집니다.

# 확장성: 클래스는 상속과 다형성을 통해 쉽게 확장할 수 있습니다. 예를 들어, Square(정사각형) 클래스는 Rectangle을 상속받아 추가적인 기능을 구현할 수 있습니다.

# 캡슐화: 객체는 내부 상태를 숨기고 메서드를 통해 접근하도록 합니다. 이렇게 하면 데이터가 외부에서 쉽게 조작되지 않으며, 객체의 무결성을 유지할 수 있습니다.